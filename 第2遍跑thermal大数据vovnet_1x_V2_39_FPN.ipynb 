{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HeqingZ/Vovnet-V2-R39-1x/blob/main/%E7%AC%AC2%E9%81%8D%E8%B7%91thermal%E5%A4%A7%E6%95%B0%E6%8D%AEvovnet_1x_V2_39_FPN.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There was no 1x by default on github [link](https://github.com/youngwanLEE/vovnet-detectron2)\n",
        "\n",
        "so that i chose to manually tune it so that it can run a 1x model. \n",
        "\n",
        "\n",
        "```\n",
        "iter = 90000\n",
        "depth = 50 #for 39\n",
        "depth = 101 #for 57\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "zoJdGf9fkQIz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oXZ-BaoZn40b",
        "outputId": "86b9ac93-1049-4e70-e96c-ac0a394fb0cc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting pyyaml==5.1\n",
            "  Downloading PyYAML-5.1.tar.gz (274 kB)\n",
            "\u001b[K     |████████████████████████████████| 274 kB 13.9 MB/s \n",
            "\u001b[?25hBuilding wheels for collected packages: pyyaml\n",
            "  Building wheel for pyyaml (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyyaml: filename=PyYAML-5.1-cp37-cp37m-linux_x86_64.whl size=44092 sha256=906ed12344606520480b8cf3c0bb4295bc3b212c29d5306686edd8edda8976d4\n",
            "  Stored in directory: /root/.cache/pip/wheels/77/f5/10/d00a2bd30928b972790053b5de0c703ca87324f3fead0f2fd9\n",
            "Successfully built pyyaml\n",
            "Installing collected packages: pyyaml\n",
            "  Attempting uninstall: pyyaml\n",
            "    Found existing installation: PyYAML 3.13\n",
            "    Uninstalling PyYAML-3.13:\n",
            "      Successfully uninstalled PyYAML-3.13\n",
            "Successfully installed pyyaml-5.1\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting git+https://github.com/facebookresearch/detectron2.git\n",
            "  Cloning https://github.com/facebookresearch/detectron2.git to /tmp/pip-req-build-b9y31ozs\n",
            "  Running command git clone -q https://github.com/facebookresearch/detectron2.git /tmp/pip-req-build-b9y31ozs\n",
            "Requirement already satisfied: Pillow>=7.1 in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (7.1.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (3.2.2)\n",
            "Requirement already satisfied: pycocotools>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (2.0.4)\n",
            "Requirement already satisfied: termcolor>=1.1 in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (1.1.0)\n",
            "Collecting yacs>=0.1.8\n",
            "  Downloading yacs-0.1.8-py3-none-any.whl (14 kB)\n",
            "Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (0.8.10)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (1.3.0)\n",
            "Requirement already satisfied: tqdm>4.29.0 in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (4.64.0)\n",
            "Requirement already satisfied: tensorboard in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (2.8.0)\n",
            "Collecting fvcore<0.1.6,>=0.1.5\n",
            "  Downloading fvcore-0.1.5.post20220512.tar.gz (50 kB)\n",
            "\u001b[K     |████████████████████████████████| 50 kB 5.5 MB/s \n",
            "\u001b[?25hCollecting iopath<0.1.10,>=0.1.7\n",
            "  Downloading iopath-0.1.9-py3-none-any.whl (27 kB)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (0.16.0)\n",
            "Requirement already satisfied: pydot in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (1.3.0)\n",
            "Collecting omegaconf>=2.1\n",
            "  Downloading omegaconf-2.2.2-py3-none-any.whl (79 kB)\n",
            "\u001b[K     |████████████████████████████████| 79 kB 10.2 MB/s \n",
            "\u001b[?25hCollecting hydra-core>=1.1\n",
            "  Downloading hydra_core-1.2.0-py3-none-any.whl (151 kB)\n",
            "\u001b[K     |████████████████████████████████| 151 kB 72.1 MB/s \n",
            "\u001b[?25hCollecting black==22.3.0\n",
            "  Downloading black-22.3.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.4 MB)\n",
            "\u001b[K     |████████████████████████████████| 1.4 MB 65.0 MB/s \n",
            "\u001b[?25hCollecting timm\n",
            "  Downloading timm-0.6.5-py3-none-any.whl (512 kB)\n",
            "\u001b[K     |████████████████████████████████| 512 kB 72.0 MB/s \n",
            "\u001b[?25hCollecting fairscale\n",
            "  Downloading fairscale-0.4.6.tar.gz (248 kB)\n",
            "\u001b[K     |████████████████████████████████| 248 kB 73.6 MB/s \n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Installing backend dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from detectron2==0.6) (21.3)\n",
            "Requirement already satisfied: typing-extensions>=3.10.0.0 in /usr/local/lib/python3.7/dist-packages (from black==22.3.0->detectron2==0.6) (4.1.1)\n",
            "Collecting click>=8.0.0\n",
            "  Downloading click-8.1.3-py3-none-any.whl (96 kB)\n",
            "\u001b[K     |████████████████████████████████| 96 kB 5.2 MB/s \n",
            "\u001b[?25hCollecting typed-ast>=1.4.2\n",
            "  Downloading typed_ast-1.5.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (843 kB)\n",
            "\u001b[K     |████████████████████████████████| 843 kB 67.7 MB/s \n",
            "\u001b[?25hCollecting mypy-extensions>=0.4.3\n",
            "  Downloading mypy_extensions-0.4.3-py2.py3-none-any.whl (4.5 kB)\n",
            "Collecting platformdirs>=2\n",
            "  Downloading platformdirs-2.5.2-py3-none-any.whl (14 kB)\n",
            "Collecting pathspec>=0.9.0\n",
            "  Downloading pathspec-0.9.0-py2.py3-none-any.whl (31 kB)\n",
            "Requirement already satisfied: tomli>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from black==22.3.0->detectron2==0.6) (2.0.1)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from click>=8.0.0->black==22.3.0->detectron2==0.6) (4.12.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from fvcore<0.1.6,>=0.1.5->detectron2==0.6) (1.21.6)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from fvcore<0.1.6,>=0.1.5->detectron2==0.6) (5.1)\n",
            "Collecting antlr4-python3-runtime==4.9.*\n",
            "  Downloading antlr4-python3-runtime-4.9.3.tar.gz (117 kB)\n",
            "\u001b[K     |████████████████████████████████| 117 kB 74.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: importlib-resources in /usr/local/lib/python3.7/dist-packages (from hydra-core>=1.1->detectron2==0.6) (5.8.0)\n",
            "Collecting portalocker\n",
            "  Downloading portalocker-2.5.1-py2.py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->detectron2==0.6) (3.0.9)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->detectron2==0.6) (1.4.4)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->detectron2==0.6) (0.11.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->detectron2==0.6) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->detectron2==0.6) (1.15.0)\n",
            "Requirement already satisfied: torch>=1.8.0 in /usr/local/lib/python3.7/dist-packages (from fairscale->detectron2==0.6) (1.12.0+cu113)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->click>=8.0.0->black==22.3.0->detectron2==0.6) (3.8.1)\n",
            "Requirement already satisfied: grpcio>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (1.47.0)\n",
            "Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (1.2.0)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (0.6.1)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (3.4.1)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (1.35.0)\n",
            "Requirement already satisfied: protobuf>=3.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (3.17.3)\n",
            "Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (57.4.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (0.4.6)\n",
            "Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (1.0.1)\n",
            "Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (0.37.1)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (2.23.0)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard->detectron2==0.6) (1.8.1)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->detectron2==0.6) (4.9)\n",
            "Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->detectron2==0.6) (4.2.4)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard->detectron2==0.6) (0.2.8)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard->detectron2==0.6) (1.3.1)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->detectron2==0.6) (0.4.8)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->detectron2==0.6) (1.24.3)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->detectron2==0.6) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->detectron2==0.6) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard->detectron2==0.6) (2022.6.15)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard->detectron2==0.6) (3.2.0)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from timm->detectron2==0.6) (0.13.0+cu113)\n",
            "Building wheels for collected packages: detectron2, fvcore, antlr4-python3-runtime, fairscale\n",
            "  Building wheel for detectron2 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for detectron2: filename=detectron2-0.6-cp37-cp37m-linux_x86_64.whl size=5244355 sha256=b5d8834a1ce43d79ac9ac8c1de40c9cfab26f44f375e1c4b2cbe98c9c7c4b55e\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-fs_zo1c5/wheels/07/dc/32/0322cb484dbefab8b9366bfedbaff5060ac7d149d69c27ca5d\n",
            "  Building wheel for fvcore (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for fvcore: filename=fvcore-0.1.5.post20220512-py3-none-any.whl size=61288 sha256=fbaec209f1ecd90cadc88bbd1748dfde85f0103265be2d706b99fb707010bf75\n",
            "  Stored in directory: /root/.cache/pip/wheels/68/20/f9/a11a0dd63f4c13678b2a5ec488e48078756505c7777b75b29e\n",
            "  Building wheel for antlr4-python3-runtime (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for antlr4-python3-runtime: filename=antlr4_python3_runtime-4.9.3-py3-none-any.whl size=144575 sha256=9a0d49233d757c16a0a674fc1db7b11a8e5b812f613dcf03e332221acb7732bb\n",
            "  Stored in directory: /root/.cache/pip/wheels/8b/8d/53/2af8772d9aec614e3fc65e53d4a993ad73c61daa8bbd85a873\n",
            "  Building wheel for fairscale (PEP 517) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for fairscale: filename=fairscale-0.4.6-py3-none-any.whl size=307252 sha256=6c0af1f04f7da70ddc218d8ad218b75f7a6d47b57608e79b0989a88f8386cc49\n",
            "  Stored in directory: /root/.cache/pip/wheels/4e/4f/0b/94c29ea06dfad93260cb0377855f87b7b863312317a7f69fe7\n",
            "Successfully built detectron2 fvcore antlr4-python3-runtime fairscale\n",
            "Installing collected packages: portalocker, antlr4-python3-runtime, yacs, typed-ast, platformdirs, pathspec, omegaconf, mypy-extensions, iopath, click, timm, hydra-core, fvcore, fairscale, black, detectron2\n",
            "  Attempting uninstall: click\n",
            "    Found existing installation: click 7.1.2\n",
            "    Uninstalling click-7.1.2:\n",
            "      Successfully uninstalled click-7.1.2\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "flask 1.1.4 requires click<8.0,>=5.1, but you have click 8.1.3 which is incompatible.\u001b[0m\n",
            "Successfully installed antlr4-python3-runtime-4.9.3 black-22.3.0 click-8.1.3 detectron2-0.6 fairscale-0.4.6 fvcore-0.1.5.post20220512 hydra-core-1.2.0 iopath-0.1.9 mypy-extensions-0.4.3 omegaconf-2.2.2 pathspec-0.9.0 platformdirs-2.5.2 portalocker-2.5.1 timm-0.6.5 typed-ast-1.5.4 yacs-0.1.8\n"
          ]
        }
      ],
      "source": [
        "#install detectron2\n",
        "!python -m pip install pyyaml==5.1\n",
        "!python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6svJDiBGoH3o",
        "outputId": "67fdc558-1208-413c-9c9c-c1f32c1b86a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nvcc: NVIDIA (R) Cuda compiler driver\n",
            "Copyright (c) 2005-2020 NVIDIA Corporation\n",
            "Built on Mon_Oct_12_20:09:46_PDT_2020\n",
            "Cuda compilation tools, release 11.1, V11.1.105\n",
            "Build cuda_11.1.TC455_06.29190527_0\n",
            "torch:  1.12 ; cuda:  cu113\n",
            "detectron2: 0.6\n"
          ]
        }
      ],
      "source": [
        "#import some important utilities of Detectron2\n",
        "import torch, detectron2\n",
        "!nvcc --version\n",
        "TORCH_VERSION = \".\".join(torch.__version__.split(\".\")[:2])\n",
        "CUDA_VERSION = torch.__version__.split(\"+\")[-1]\n",
        "print(\"torch: \", TORCH_VERSION, \"; cuda: \", CUDA_VERSION)\n",
        "print(\"detectron2:\", detectron2.__version__)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "OXPdIhZRoLBy"
      },
      "outputs": [],
      "source": [
        "# Some basic setup:\n",
        "# Setup detectron2 logger\n",
        "import detectron2\n",
        "from detectron2.utils.logger import setup_logger\n",
        "setup_logger()\n",
        "\n",
        "# import some common libraries\n",
        "import numpy as np\n",
        "import os, json, cv2, random\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "# import some common detectron2 utilities\n",
        "from detectron2 import model_zoo\n",
        "from detectron2.engine import DefaultPredictor\n",
        "from detectron2.config import get_cfg\n",
        "from detectron2.utils.visualizer import Visualizer\n",
        "from detectron2.data import MetadataCatalog, DatasetCatalog\n",
        "#import features for the bbox\n",
        "import numpy as np\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "from detectron2.structures import BoxMode"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aOIMZ1RWoOk1",
        "outputId": "2cc3b34e-f64b-44ba-d7e4-abb266a3cc08"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "#mount on google drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "TcUHy8ldoZ1M"
      },
      "outputs": [],
      "source": [
        "#define the file path to retrieve images\n",
        "def FLIR(source_path, img_dir, anno_dir ): #define a function. assuming user doesnt know shit about coding and enter random stuff. related to anno dir and img dir\n",
        "    img_dir = os.path.join(source_path, img_dir)\n",
        "    anno_dir = os.path.join(source_path, anno_dir)\n",
        "    data_dicts = []\n",
        "    #define annotation properties\n",
        "    with open(anno_dir) as F:\n",
        "      jsonfile = json.load(F) #load annotations from json file into the dictionary\n",
        "    \n",
        "    annotationinfo = jsonfile[\"annotations\"]\n",
        "    imagesinfo = jsonfile[\"images\"] #retreieve info like category ID and bbox\n",
        "   \n",
        "    #define img sources\n",
        "     \n",
        "    img_dir_list = os.listdir(img_dir)#get the list of all files and directories in the specified directory.\n",
        "    # print(img_dir)\n",
        "    for img_info in imagesinfo: #bbox info category id\n",
        "      for images in img_dir_list:  #img_dir_list = img_dir, which is source_path/img_dir(original)\n",
        "        images = \"data/\" + images\n",
        "        if images == img_info['file_name']: #see if name matches each other, because we wanna find the filenames only for the small flir out of the whole json file\n",
        "\n",
        "          record={}\n",
        "          filename = os.path.join(source_path, img_info[\"file_name\"])\n",
        "          # print(filename)\n",
        "          record[\"file_name\"] = filename\n",
        "          record[\"image_id\"] = img_info['id']\n",
        "          record[\"height\"] = img_info['height']\n",
        "          record['width'] = img_info['width']\n",
        "        \n",
        "          box_info = []\n",
        "          \n",
        "          for anno in annotationinfo:\n",
        "            if anno[\"image_id\"] == img_info['id']:\n",
        "              # if (anno['category_id'] <= 3) & (anno['category_id'] > 0):\n",
        "              if (anno['category_id'] == 1) & (anno['category_id'] > 0): # Predict people only\n",
        "                        box = {\n",
        "                        \"bbox\": anno['bbox'],\n",
        "                        'bbox_mode': BoxMode.XYWH_ABS, # Category_id starts from 0 in detectron2\n",
        "                        'category_id': int(anno['category_id']-1)  #we forcibly convert this shit into integer to be able to minus 1. just incase the stuff from the dict is integer\n",
        "                        #computer counts from zero but not hyman. we have to substract one to match the computer #update Jun29: i deleted -1, bcz there is no category 0 \n",
        "                        } #exactly how dictionary looks like\n",
        "                        imagetesthaha = cv2.imread(filename, 0) \n",
        "                        tt = cv2.rectangle(imagetesthaha, anno[\"bbox\"], (255,0,0),2)\n",
        "                        #cv2_imshow(tt) #for printing all boxes in images one by one, will crash\n",
        "                        box_info.append(box)\n",
        "          record[\"annotations\"] = box_info\n",
        "\n",
        "          data_dicts.append(record)\n",
        "    return data_dicts\n",
        "\n",
        "      \n",
        "      \n",
        "    #print(type(jsonfile)) #check the  type of jsonfile. dict or list or stuff\n",
        "\n",
        "\n",
        "\n",
        "#define dataloader for training and testing sets\n",
        "#train_dataloader = dataloader(training_data, batch_size=64, shuffle=True)\n",
        "#test_dataloader = dataloader(test_data, batch_size=64, shuffle=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3s1JnldjqII1"
      },
      "outputs": [],
      "source": [
        "DatasetCatalog.clear() #unregister stuff"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "zkVXWnkIo8Ej"
      },
      "outputs": [],
      "source": [
        "for d in [\"train\", \"val\"]:\n",
        "    DatasetCatalog.register(\"FLIR_THERMAL_\" + d + \"_data\", lambda d=d: FLIR(\"/content/drive/MyDrive/FLIR_THERMAL/train\", \"data\", \"coco.json\")) #changed \"/directry/stuff/\" +d +\"shit\" into this rn\n",
        "    MetadataCatalog.get(\"FLIR_THERMAL_\" + d + \"_data\").set(thing_classes=[\"FLIR_THERMAL\"])\n",
        "FLIR_metadata = MetadataCatalog.get(\"FLIR_THERMAL_train_data\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "bm1wDCzCwjUs"
      },
      "outputs": [],
      "source": [
        "#to varify our thing by calling the function\n",
        "dataset_dicts = FLIR(\"/content/drive/MyDrive/FLIR_THERMAL/train\", \"data\", \"coco.json\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5tsvLlYzmPSm",
        "outputId": "3acf54a3-81a5-4298-9437-89521a7af154"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Thu Jul 21 23:14:03 2022       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla V100-SXM2...  Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   39C    P0    37W / 300W |  15625MiB / 16160MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "+-----------------------------------------------------------------------------+\n"
          ]
        }
      ],
      "source": [
        "!nvidia-smi"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "_ThmiuglrpaC"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "torch.cuda.empty_cache()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ARDorzM-lI9n",
        "outputId": "d3719848-128a-4406-b187-ab86020f5ce2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "python3: can't open file '/path/to/vovnet-detectron2/train_net.py': [Errno 2] No such file or directory\n",
            "\u001b[32m[07/26 20:06:33 d2.engine.defaults]: \u001b[0mModel:\n",
            "GeneralizedRCNN(\n",
            "  (backbone): ResNet(\n",
            "    (stem): BasicStem(\n",
            "      (conv1): Conv2d(\n",
            "        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False\n",
            "        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "      )\n",
            "    )\n",
            "    (res2): Sequential(\n",
            "      (0): BottleneckBlock(\n",
            "        (shortcut): Conv2d(\n",
            "          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv1): Conv2d(\n",
            "          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (1): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (2): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (res3): Sequential(\n",
            "      (0): BottleneckBlock(\n",
            "        (shortcut): Conv2d(\n",
            "          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "        (conv1): Conv2d(\n",
            "          256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (1): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (2): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (3): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (res4): Sequential(\n",
            "      (0): BottleneckBlock(\n",
            "        (shortcut): Conv2d(\n",
            "          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "        )\n",
            "        (conv1): Conv2d(\n",
            "          512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (1): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (2): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (3): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (4): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (5): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "  )\n",
            "  (proposal_generator): RPN(\n",
            "    (rpn_head): StandardRPNHead(\n",
            "      (conv): Conv2d(\n",
            "        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)\n",
            "        (activation): ReLU()\n",
            "      )\n",
            "      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))\n",
            "      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))\n",
            "    )\n",
            "    (anchor_generator): DefaultAnchorGenerator(\n",
            "      (cell_anchors): BufferList()\n",
            "    )\n",
            "  )\n",
            "  (roi_heads): Res5ROIHeads(\n",
            "    (pooler): ROIPooler(\n",
            "      (level_poolers): ModuleList(\n",
            "        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)\n",
            "      )\n",
            "    )\n",
            "    (res5): Sequential(\n",
            "      (0): BottleneckBlock(\n",
            "        (shortcut): Conv2d(\n",
            "          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "        )\n",
            "        (conv1): Conv2d(\n",
            "          1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (1): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "      (2): BottleneckBlock(\n",
            "        (conv1): Conv2d(\n",
            "          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "        (conv2): Conv2d(\n",
            "          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)\n",
            "        )\n",
            "        (conv3): Conv2d(\n",
            "          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False\n",
            "          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)\n",
            "        )\n",
            "      )\n",
            "    )\n",
            "    (box_predictor): FastRCNNOutputLayers(\n",
            "      (cls_score): Linear(in_features=2048, out_features=2, bias=True)\n",
            "      (bbox_pred): Linear(in_features=2048, out_features=4, bias=True)\n",
            "    )\n",
            "  )\n",
            ")\n",
            "\u001b[32m[07/26 20:18:10 d2.data.build]: \u001b[0mRemoved 2537 images with no usable annotations. 8205 images left.\n",
            "\u001b[32m[07/26 20:18:10 d2.data.build]: \u001b[0mDistribution of instances among all 1 categories:\n",
            "\u001b[36m|   category   | #instances   |\n",
            "|:------------:|:-------------|\n",
            "| FLIR_THERMAL | 50478        |\n",
            "|              |              |\u001b[0m\n",
            "\u001b[32m[07/26 20:18:10 d2.data.dataset_mapper]: \u001b[0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]\n",
            "\u001b[32m[07/26 20:18:10 d2.data.build]: \u001b[0mUsing training sampler TrainingSampler\n",
            "\u001b[32m[07/26 20:18:11 d2.data.common]: \u001b[0mSerializing 8205 elements to byte tensors and concatenating them all ...\n",
            "\u001b[32m[07/26 20:18:11 d2.data.common]: \u001b[0mSerialized dataset takes 3.35 MiB\n",
            "\u001b[32m[07/26 20:18:15 d2.checkpoint.c2_model_loading]: \u001b[0mFollowing weights matched with model:\n",
            "| Names in Model                                  | Names in Checkpoint                                                                         | Shapes                                          |\n",
            "|:------------------------------------------------|:--------------------------------------------------------------------------------------------|:------------------------------------------------|\n",
            "| backbone.res2.0.conv1.*                         | backbone.res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,1,1)             |\n",
            "| backbone.res2.0.conv2.*                         | backbone.res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.0.conv3.*                         | backbone.res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.0.shortcut.*                      | backbone.res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.1.conv1.*                         | backbone.res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,256,1,1)            |\n",
            "| backbone.res2.1.conv2.*                         | backbone.res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.1.conv3.*                         | backbone.res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.2.conv1.*                         | backbone.res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,256,1,1)            |\n",
            "| backbone.res2.2.conv2.*                         | backbone.res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.2.conv3.*                         | backbone.res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res3.0.conv1.*                         | backbone.res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,256,1,1)       |\n",
            "| backbone.res3.0.conv2.*                         | backbone.res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.0.conv3.*                         | backbone.res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.0.shortcut.*                      | backbone.res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |\n",
            "| backbone.res3.1.conv1.*                         | backbone.res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.1.conv2.*                         | backbone.res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.1.conv3.*                         | backbone.res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.2.conv1.*                         | backbone.res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.2.conv2.*                         | backbone.res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.2.conv3.*                         | backbone.res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.3.conv1.*                         | backbone.res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.3.conv2.*                         | backbone.res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.3.conv3.*                         | backbone.res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res4.0.conv1.*                         | backbone.res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,512,1,1)       |\n",
            "| backbone.res4.0.conv2.*                         | backbone.res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.0.conv3.*                         | backbone.res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.0.shortcut.*                      | backbone.res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |\n",
            "| backbone.res4.1.conv1.*                         | backbone.res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.1.conv2.*                         | backbone.res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.1.conv3.*                         | backbone.res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.2.conv1.*                         | backbone.res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.2.conv2.*                         | backbone.res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.2.conv3.*                         | backbone.res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.3.conv1.*                         | backbone.res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.3.conv2.*                         | backbone.res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.3.conv3.*                         | backbone.res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.4.conv1.*                         | backbone.res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.4.conv2.*                         | backbone.res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.4.conv3.*                         | backbone.res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.5.conv1.*                         | backbone.res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.5.conv2.*                         | backbone.res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.5.conv3.*                         | backbone.res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.stem.conv1.*                           | backbone.stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}       | (64,) (64,) (64,) (64,) (64,3,7,7)              |\n",
            "| proposal_generator.rpn_head.anchor_deltas.*     | proposal_generator.rpn_head.anchor_deltas.{bias,weight}                                     | (60,) (60,1024,1,1)                             |\n",
            "| proposal_generator.rpn_head.conv.*              | proposal_generator.rpn_head.conv.{bias,weight}                                              | (1024,) (1024,1024,3,3)                         |\n",
            "| proposal_generator.rpn_head.objectness_logits.* | proposal_generator.rpn_head.objectness_logits.{bias,weight}                                 | (15,) (15,1024,1,1)                             |\n",
            "| roi_heads.box_predictor.bbox_pred.*             | roi_heads.box_predictor.bbox_pred.{bias,weight}                                             | (4,) (4,2048)                                   |\n",
            "| roi_heads.box_predictor.cls_score.*             | roi_heads.box_predictor.cls_score.{bias,weight}                                             | (2,) (2,2048)                                   |\n",
            "| roi_heads.res5.0.conv1.*                        | roi_heads.res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |\n",
            "| roi_heads.res5.0.conv2.*                        | roi_heads.res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.0.conv3.*                        | roi_heads.res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "| roi_heads.res5.0.shortcut.*                     | roi_heads.res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |\n",
            "| roi_heads.res5.1.conv1.*                        | roi_heads.res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |\n",
            "| roi_heads.res5.1.conv2.*                        | roi_heads.res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.1.conv3.*                        | roi_heads.res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "| roi_heads.res5.2.conv1.*                        | roi_heads.res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |\n",
            "| roi_heads.res5.2.conv2.*                        | roi_heads.res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.2.conv3.*                        | roi_heads.res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "\u001b[32m[07/26 20:18:18 d2.engine.hooks]: \u001b[0mLoading scheduler from state_dict ...\n",
            "\u001b[32m[07/26 20:18:18 d2.engine.train_loop]: \u001b[0mStarting training from iteration 90000\n",
            "\u001b[32m[07/26 20:18:18 d2.engine.hooks]: \u001b[0mTotal training time: 0:00:00 (0:00:00 on hooks)\n",
            "\u001b[32m[07/26 20:18:18 d2.utils.events]: \u001b[0m iter: 90001    lr: N/A  max_mem: 256M\n"
          ]
        }
      ],
      "source": [
        "from detectron2.engine import DefaultTrainer\n",
        "\n",
        "cfg = get_cfg()\n",
        "# cfg.merge_from_file(model_zoo.get_config_file(\"COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml\"))\n",
        "!python /path/to/vovnet-detectron2/train_net.py --config-file /path/to/vovnet-detectron2/configs/faster_rcnn_V2_39_FPN_3x.yaml --num-gpus 8\n",
        "cfg.DATASETS.TRAIN = (\"FLIR_THERMAL_train_data\",)\n",
        "cfg.MODEL.RESNETS.DEPTH = 50\n",
        "cfg.DATASETS.TEST = ()\n",
        "cfg.DATALOADER.NUM_WORKERS = 2\n",
        "cfg.SOLVER.IMS_PER_BATCH = 4  # This is the real \"batch size\" commonly known to deep learning people #first try Jul 20: 4#\n",
        "cfg.SOLVER.BASE_LR = 0.0025 # pick a good LR #0.0025 fix\n",
        "cfg.SOLVER.MAX_ITER = 90000    # 90000 for default 1x\n",
        "cfg.SOLVER.STEPS = []        # do not decay learning rate\n",
        "cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 512   # The \"RoIHead batch size\". 128 is faster, and good enough for this toy dataset (default: 512)\n",
        "cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1  # only has one class (people). (see https://detectron2.readthedocs.io/tutorials/datasets.html#update-the-config-for-new-datasets)\n",
        "# NOTE: this config means the number of classes, but a few popular unofficial tutorials incorrect uses num_classes+1 here.\n",
        "# cfg.MODEL.MASK_ON = False\n",
        "cfg.MODEL.RESNETS.DEFORM_MODULATED = True\n",
        "cfg.MODEL.BACKBONE.FREEZE_AT = 0\n",
        "cfg.OUTPUT_DIR = \"/content/drive/MyDrive/Vovnet_V2_39_FPN_Output\"\n",
        "\n",
        "\n",
        "os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\n",
        "trainer = DefaultTrainer(cfg) \n",
        "trainer.resume_or_load(resume=True)\n",
        "trainer.train()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aOfQMXqSVAT5"
      },
      "outputs": [],
      "source": [
        "# Look at training curves in tensorboard:\n",
        "%load_ext tensorboard\n",
        "%tensorboard --logdir output"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "90lwAONn0WRh"
      },
      "outputs": [],
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GRKyeHV1_ZLV",
        "outputId": "95098b24-3888-489f-c187-6329e243614e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[32m[07/26 20:30:57 d2.checkpoint.c2_model_loading]: \u001b[0mFollowing weights matched with model:\n",
            "| Names in Model                                  | Names in Checkpoint                                                                         | Shapes                                          |\n",
            "|:------------------------------------------------|:--------------------------------------------------------------------------------------------|:------------------------------------------------|\n",
            "| backbone.res2.0.conv1.*                         | backbone.res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,1,1)             |\n",
            "| backbone.res2.0.conv2.*                         | backbone.res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.0.conv3.*                         | backbone.res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.0.shortcut.*                      | backbone.res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.1.conv1.*                         | backbone.res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,256,1,1)            |\n",
            "| backbone.res2.1.conv2.*                         | backbone.res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.1.conv3.*                         | backbone.res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.2.conv1.*                         | backbone.res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,256,1,1)            |\n",
            "| backbone.res2.2.conv2.*                         | backbone.res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.2.conv3.*                         | backbone.res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res3.0.conv1.*                         | backbone.res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,256,1,1)       |\n",
            "| backbone.res3.0.conv2.*                         | backbone.res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.0.conv3.*                         | backbone.res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.0.shortcut.*                      | backbone.res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |\n",
            "| backbone.res3.1.conv1.*                         | backbone.res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.1.conv2.*                         | backbone.res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.1.conv3.*                         | backbone.res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.2.conv1.*                         | backbone.res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.2.conv2.*                         | backbone.res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.2.conv3.*                         | backbone.res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.3.conv1.*                         | backbone.res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.3.conv2.*                         | backbone.res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.3.conv3.*                         | backbone.res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res4.0.conv1.*                         | backbone.res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,512,1,1)       |\n",
            "| backbone.res4.0.conv2.*                         | backbone.res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.0.conv3.*                         | backbone.res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.0.shortcut.*                      | backbone.res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |\n",
            "| backbone.res4.1.conv1.*                         | backbone.res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.1.conv2.*                         | backbone.res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.1.conv3.*                         | backbone.res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.2.conv1.*                         | backbone.res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.2.conv2.*                         | backbone.res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.2.conv3.*                         | backbone.res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.3.conv1.*                         | backbone.res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.3.conv2.*                         | backbone.res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.3.conv3.*                         | backbone.res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.4.conv1.*                         | backbone.res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.4.conv2.*                         | backbone.res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.4.conv3.*                         | backbone.res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.5.conv1.*                         | backbone.res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.5.conv2.*                         | backbone.res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.5.conv3.*                         | backbone.res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.stem.conv1.*                           | backbone.stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}       | (64,) (64,) (64,) (64,) (64,3,7,7)              |\n",
            "| proposal_generator.rpn_head.anchor_deltas.*     | proposal_generator.rpn_head.anchor_deltas.{bias,weight}                                     | (60,) (60,1024,1,1)                             |\n",
            "| proposal_generator.rpn_head.conv.*              | proposal_generator.rpn_head.conv.{bias,weight}                                              | (1024,) (1024,1024,3,3)                         |\n",
            "| proposal_generator.rpn_head.objectness_logits.* | proposal_generator.rpn_head.objectness_logits.{bias,weight}                                 | (15,) (15,1024,1,1)                             |\n",
            "| roi_heads.box_predictor.bbox_pred.*             | roi_heads.box_predictor.bbox_pred.{bias,weight}                                             | (4,) (4,2048)                                   |\n",
            "| roi_heads.box_predictor.cls_score.*             | roi_heads.box_predictor.cls_score.{bias,weight}                                             | (2,) (2,2048)                                   |\n",
            "| roi_heads.res5.0.conv1.*                        | roi_heads.res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |\n",
            "| roi_heads.res5.0.conv2.*                        | roi_heads.res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.0.conv3.*                        | roi_heads.res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "| roi_heads.res5.0.shortcut.*                     | roi_heads.res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |\n",
            "| roi_heads.res5.1.conv1.*                        | roi_heads.res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |\n",
            "| roi_heads.res5.1.conv2.*                        | roi_heads.res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.1.conv3.*                        | roi_heads.res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "| roi_heads.res5.2.conv1.*                        | roi_heads.res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |\n",
            "| roi_heads.res5.2.conv2.*                        | roi_heads.res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.2.conv3.*                        | roi_heads.res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n"
          ]
        }
      ],
      "source": [
        "from detectron2.utils.visualizer import ColorMode\n",
        "\n",
        "#Use the final weights generated after successful training for inference  \n",
        "cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\n",
        "\n",
        "cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.8  # set the testing threshold for this model\n",
        "#Pass the validation dataset\n",
        "cfg.DATASETS.TEST = (\"boardetect_val\", )\n",
        "\n",
        "predictor = DefaultPredictor(cfg)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "id": "VRynJNaQcL7F",
        "outputId": "64ea62b6-7e9d-4ba6-8f10-e5d50712d503"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-2328ef97f016>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/output/model_final.pth'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mdownload\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m    179\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Cannot find file: {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mFileNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=undefined-variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m   \u001b[0mcomm_manager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_IPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkernel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomm_manager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: Cannot find file: /content/output/model_final.pth"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "files.download('/content/output/model_final.pth')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "dFBn67vb_dZg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "dfd23c76-7511-4b17-d2fc-45239310ed55"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=320x256 at 0x7F320083E250>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=320x256 at 0x7F3325083B90>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=320x256 at 0x7F3324E6CC10>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=320x256 at 0x7F3324D0E190>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=320x256 at 0x7F3324E00F90>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#see if this shit is wroking aka run instance on test images\n",
        "from detectron2.utils.visualizer import ColorMode\n",
        "dataset_dicts = FLIR(\"/content/drive/MyDrive/FLIR_THERMAL/val/\", \"data\", \"coco.json\")\n",
        "for d in random.sample(dataset_dicts, 5):    \n",
        "    im = cv2.imread(d[\"file_name\"])\n",
        "    outputs = predictor(im)  # format is documented at https://detectron2.readthedocs.io/tutorials/models.html#model-output-format\n",
        "    v = Visualizer(im[:, :, ::-1],\n",
        "                   metadata=FLIR_metadata, \n",
        "                   scale=0.5, \n",
        "                      # remove the colors of unsegmented pixels. This option is only available for segmentation models\n",
        "    )\n",
        "    out = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n",
        "    cv2_imshow(out.get_image()[:, :, ::-1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mjX2dFJ0a8LS",
        "outputId": "2c1692bb-5311-4217-8c90-4bbe57c166d2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[32m[07/26 20:32:51 d2.checkpoint.c2_model_loading]: \u001b[0mFollowing weights matched with model:\n",
            "| Names in Model                                  | Names in Checkpoint                                                                         | Shapes                                          |\n",
            "|:------------------------------------------------|:--------------------------------------------------------------------------------------------|:------------------------------------------------|\n",
            "| backbone.res2.0.conv1.*                         | backbone.res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,1,1)             |\n",
            "| backbone.res2.0.conv2.*                         | backbone.res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.0.conv3.*                         | backbone.res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.0.shortcut.*                      | backbone.res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.1.conv1.*                         | backbone.res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,256,1,1)            |\n",
            "| backbone.res2.1.conv2.*                         | backbone.res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.1.conv3.*                         | backbone.res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res2.2.conv1.*                         | backbone.res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,256,1,1)            |\n",
            "| backbone.res2.2.conv2.*                         | backbone.res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (64,) (64,) (64,) (64,) (64,64,3,3)             |\n",
            "| backbone.res2.2.conv3.*                         | backbone.res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,64,1,1)        |\n",
            "| backbone.res3.0.conv1.*                         | backbone.res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,256,1,1)       |\n",
            "| backbone.res3.0.conv2.*                         | backbone.res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.0.conv3.*                         | backbone.res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.0.shortcut.*                      | backbone.res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |\n",
            "| backbone.res3.1.conv1.*                         | backbone.res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.1.conv2.*                         | backbone.res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.1.conv3.*                         | backbone.res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.2.conv1.*                         | backbone.res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.2.conv2.*                         | backbone.res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.2.conv3.*                         | backbone.res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res3.3.conv1.*                         | backbone.res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,512,1,1)       |\n",
            "| backbone.res3.3.conv2.*                         | backbone.res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (128,) (128,) (128,) (128,) (128,128,3,3)       |\n",
            "| backbone.res3.3.conv3.*                         | backbone.res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (512,) (512,) (512,) (512,) (512,128,1,1)       |\n",
            "| backbone.res4.0.conv1.*                         | backbone.res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,512,1,1)       |\n",
            "| backbone.res4.0.conv2.*                         | backbone.res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.0.conv3.*                         | backbone.res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.0.shortcut.*                      | backbone.res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |\n",
            "| backbone.res4.1.conv1.*                         | backbone.res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.1.conv2.*                         | backbone.res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.1.conv3.*                         | backbone.res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.2.conv1.*                         | backbone.res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.2.conv2.*                         | backbone.res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.2.conv3.*                         | backbone.res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.3.conv1.*                         | backbone.res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.3.conv2.*                         | backbone.res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.3.conv3.*                         | backbone.res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.4.conv1.*                         | backbone.res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.4.conv2.*                         | backbone.res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.4.conv3.*                         | backbone.res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.res4.5.conv1.*                         | backbone.res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,1024,1,1)      |\n",
            "| backbone.res4.5.conv2.*                         | backbone.res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (256,) (256,) (256,) (256,) (256,256,3,3)       |\n",
            "| backbone.res4.5.conv3.*                         | backbone.res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}     | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |\n",
            "| backbone.stem.conv1.*                           | backbone.stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}       | (64,) (64,) (64,) (64,) (64,3,7,7)              |\n",
            "| proposal_generator.rpn_head.anchor_deltas.*     | proposal_generator.rpn_head.anchor_deltas.{bias,weight}                                     | (60,) (60,1024,1,1)                             |\n",
            "| proposal_generator.rpn_head.conv.*              | proposal_generator.rpn_head.conv.{bias,weight}                                              | (1024,) (1024,1024,3,3)                         |\n",
            "| proposal_generator.rpn_head.objectness_logits.* | proposal_generator.rpn_head.objectness_logits.{bias,weight}                                 | (15,) (15,1024,1,1)                             |\n",
            "| roi_heads.box_predictor.bbox_pred.*             | roi_heads.box_predictor.bbox_pred.{bias,weight}                                             | (4,) (4,2048)                                   |\n",
            "| roi_heads.box_predictor.cls_score.*             | roi_heads.box_predictor.cls_score.{bias,weight}                                             | (2,) (2,2048)                                   |\n",
            "| roi_heads.res5.0.conv1.*                        | roi_heads.res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |\n",
            "| roi_heads.res5.0.conv2.*                        | roi_heads.res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.0.conv3.*                        | roi_heads.res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "| roi_heads.res5.0.shortcut.*                     | roi_heads.res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |\n",
            "| roi_heads.res5.1.conv1.*                        | roi_heads.res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |\n",
            "| roi_heads.res5.1.conv2.*                        | roi_heads.res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.1.conv3.*                        | roi_heads.res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "| roi_heads.res5.2.conv1.*                        | roi_heads.res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |\n",
            "| roi_heads.res5.2.conv2.*                        | roi_heads.res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |\n",
            "| roi_heads.res5.2.conv3.*                        | roi_heads.res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |\n",
            "\u001b[5m\u001b[31mWARNING\u001b[0m \u001b[32m[07/26 20:32:51 d2.evaluation.coco_evaluation]: \u001b[0mCOCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.\n",
            "\u001b[32m[07/26 20:32:51 d2.evaluation.coco_evaluation]: \u001b[0mTrying to convert 'FLIR_THERMAL_train_data' to COCO format ...\n",
            "\u001b[32m[07/26 20:32:51 d2.data.datasets.coco]: \u001b[0mConverting annotations of dataset 'FLIR_THERMAL_train_data' to COCO format ...)\n",
            "\u001b[32m[07/26 20:44:54 d2.data.datasets.coco]: \u001b[0mConverting dataset dicts into COCO format\n",
            "\u001b[32m[07/26 20:44:59 d2.data.datasets.coco]: \u001b[0mConversion finished, #images: 10742, #annotations: 50478\n",
            "\u001b[32m[07/26 20:44:59 d2.data.datasets.coco]: \u001b[0mCaching COCO format annotations at 'content/output/FLIR_THERMAL_train_data_coco_format.json' ...\n",
            "\u001b[32m[07/26 20:56:51 d2.data.dataset_mapper]: \u001b[0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]\n",
            "\u001b[32m[07/26 20:56:51 d2.data.common]: \u001b[0mSerializing 10742 elements to byte tensors and concatenating them all ...\n",
            "\u001b[32m[07/26 20:56:51 d2.data.common]: \u001b[0mSerialized dataset takes 3.81 MiB\n",
            "\u001b[32m[07/26 20:56:51 d2.evaluation.evaluator]: \u001b[0mStart inference on 10742 batches\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/torch/functional.py:478: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2894.)\n",
            "  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[32m[07/26 20:56:57 d2.evaluation.evaluator]: \u001b[0mInference done 1/10742. Dataloading: 0.1831 s/iter. Inference: 6.6126 s/iter. Eval: 0.0005 s/iter. Total: 6.7982 s/iter. ETA=20:16:59\n",
            "\u001b[32m[07/26 20:57:03 d2.evaluation.evaluator]: \u001b[0mInference done 29/10742. Dataloading: 0.0019 s/iter. Inference: 0.1770 s/iter. Eval: 0.0003 s/iter. Total: 0.1792 s/iter. ETA=0:31:59\n",
            "\u001b[32m[07/26 20:57:08 d2.evaluation.evaluator]: \u001b[0mInference done 57/10742. Dataloading: 0.0020 s/iter. Inference: 0.1771 s/iter. Eval: 0.0003 s/iter. Total: 0.1795 s/iter. ETA=0:31:58\n",
            "\u001b[32m[07/26 20:57:13 d2.evaluation.evaluator]: \u001b[0mInference done 85/10742. Dataloading: 0.0020 s/iter. Inference: 0.1777 s/iter. Eval: 0.0003 s/iter. Total: 0.1801 s/iter. ETA=0:31:59\n",
            "\u001b[32m[07/26 20:57:18 d2.evaluation.evaluator]: \u001b[0mInference done 113/10742. Dataloading: 0.0021 s/iter. Inference: 0.1779 s/iter. Eval: 0.0003 s/iter. Total: 0.1804 s/iter. ETA=0:31:57\n",
            "\u001b[32m[07/26 20:57:23 d2.evaluation.evaluator]: \u001b[0mInference done 141/10742. Dataloading: 0.0021 s/iter. Inference: 0.1784 s/iter. Eval: 0.0003 s/iter. Total: 0.1809 s/iter. ETA=0:31:57\n",
            "\u001b[32m[07/26 20:57:28 d2.evaluation.evaluator]: \u001b[0mInference done 169/10742. Dataloading: 0.0021 s/iter. Inference: 0.1784 s/iter. Eval: 0.0003 s/iter. Total: 0.1810 s/iter. ETA=0:31:53\n",
            "\u001b[32m[07/26 20:57:33 d2.evaluation.evaluator]: \u001b[0mInference done 195/10742. Dataloading: 0.0021 s/iter. Inference: 0.1805 s/iter. Eval: 0.0003 s/iter. Total: 0.1831 s/iter. ETA=0:32:10\n",
            "\u001b[32m[07/26 20:57:38 d2.evaluation.evaluator]: \u001b[0mInference done 223/10742. Dataloading: 0.0021 s/iter. Inference: 0.1804 s/iter. Eval: 0.0003 s/iter. Total: 0.1829 s/iter. ETA=0:32:04\n",
            "\u001b[32m[07/26 20:57:43 d2.evaluation.evaluator]: \u001b[0mInference done 251/10742. Dataloading: 0.0021 s/iter. Inference: 0.1802 s/iter. Eval: 0.0003 s/iter. Total: 0.1827 s/iter. ETA=0:31:56\n",
            "\u001b[32m[07/26 20:57:48 d2.evaluation.evaluator]: \u001b[0mInference done 279/10742. Dataloading: 0.0021 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:31:49\n",
            "\u001b[32m[07/26 20:57:53 d2.evaluation.evaluator]: \u001b[0mInference done 307/10742. Dataloading: 0.0021 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:31:43\n",
            "\u001b[32m[07/26 20:57:58 d2.evaluation.evaluator]: \u001b[0mInference done 335/10742. Dataloading: 0.0021 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:31:37\n",
            "\u001b[32m[07/26 20:58:03 d2.evaluation.evaluator]: \u001b[0mInference done 363/10742. Dataloading: 0.0021 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:31:31\n",
            "\u001b[32m[07/26 20:58:09 d2.evaluation.evaluator]: \u001b[0mInference done 391/10742. Dataloading: 0.0021 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:31:26\n",
            "\u001b[32m[07/26 20:58:14 d2.evaluation.evaluator]: \u001b[0mInference done 417/10742. Dataloading: 0.0023 s/iter. Inference: 0.1804 s/iter. Eval: 0.0003 s/iter. Total: 0.1832 s/iter. ETA=0:31:31\n",
            "\u001b[32m[07/26 20:58:19 d2.evaluation.evaluator]: \u001b[0mInference done 445/10742. Dataloading: 0.0023 s/iter. Inference: 0.1804 s/iter. Eval: 0.0003 s/iter. Total: 0.1831 s/iter. ETA=0:31:25\n",
            "\u001b[32m[07/26 20:58:24 d2.evaluation.evaluator]: \u001b[0mInference done 473/10742. Dataloading: 0.0022 s/iter. Inference: 0.1803 s/iter. Eval: 0.0003 s/iter. Total: 0.1830 s/iter. ETA=0:31:19\n",
            "\u001b[32m[07/26 20:58:29 d2.evaluation.evaluator]: \u001b[0mInference done 501/10742. Dataloading: 0.0022 s/iter. Inference: 0.1802 s/iter. Eval: 0.0003 s/iter. Total: 0.1829 s/iter. ETA=0:31:13\n",
            "\u001b[32m[07/26 20:58:34 d2.evaluation.evaluator]: \u001b[0mInference done 529/10742. Dataloading: 0.0022 s/iter. Inference: 0.1802 s/iter. Eval: 0.0003 s/iter. Total: 0.1828 s/iter. ETA=0:31:07\n",
            "\u001b[32m[07/26 20:58:39 d2.evaluation.evaluator]: \u001b[0mInference done 557/10742. Dataloading: 0.0022 s/iter. Inference: 0.1801 s/iter. Eval: 0.0003 s/iter. Total: 0.1828 s/iter. ETA=0:31:01\n",
            "\u001b[32m[07/26 20:58:44 d2.evaluation.evaluator]: \u001b[0mInference done 585/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1827 s/iter. ETA=0:30:55\n",
            "\u001b[32m[07/26 20:58:49 d2.evaluation.evaluator]: \u001b[0mInference done 613/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:30:49\n",
            "\u001b[32m[07/26 20:58:54 d2.evaluation.evaluator]: \u001b[0mInference done 641/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:30:43\n",
            "\u001b[32m[07/26 20:58:59 d2.evaluation.evaluator]: \u001b[0mInference done 669/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:30:37\n",
            "\u001b[32m[07/26 20:59:04 d2.evaluation.evaluator]: \u001b[0mInference done 697/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:30:32\n",
            "\u001b[32m[07/26 20:59:10 d2.evaluation.evaluator]: \u001b[0mInference done 725/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:30:26\n",
            "\u001b[32m[07/26 20:59:15 d2.evaluation.evaluator]: \u001b[0mInference done 753/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:30:21\n",
            "\u001b[32m[07/26 20:59:20 d2.evaluation.evaluator]: \u001b[0mInference done 781/10742. Dataloading: 0.0022 s/iter. Inference: 0.1797 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:30:16\n",
            "\u001b[32m[07/26 20:59:25 d2.evaluation.evaluator]: \u001b[0mInference done 809/10742. Dataloading: 0.0022 s/iter. Inference: 0.1797 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:30:11\n",
            "\u001b[32m[07/26 20:59:30 d2.evaluation.evaluator]: \u001b[0mInference done 837/10742. Dataloading: 0.0022 s/iter. Inference: 0.1797 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:30:06\n",
            "\u001b[32m[07/26 20:59:35 d2.evaluation.evaluator]: \u001b[0mInference done 865/10742. Dataloading: 0.0021 s/iter. Inference: 0.1797 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:30:00\n",
            "\u001b[32m[07/26 20:59:40 d2.evaluation.evaluator]: \u001b[0mInference done 893/10742. Dataloading: 0.0021 s/iter. Inference: 0.1797 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:29:55\n",
            "\u001b[32m[07/26 20:59:45 d2.evaluation.evaluator]: \u001b[0mInference done 921/10742. Dataloading: 0.0021 s/iter. Inference: 0.1797 s/iter. Eval: 0.0003 s/iter. Total: 0.1823 s/iter. ETA=0:29:50\n",
            "\u001b[32m[07/26 20:59:50 d2.evaluation.evaluator]: \u001b[0mInference done 949/10742. Dataloading: 0.0021 s/iter. Inference: 0.1797 s/iter. Eval: 0.0003 s/iter. Total: 0.1822 s/iter. ETA=0:29:44\n",
            "\u001b[32m[07/26 20:59:55 d2.evaluation.evaluator]: \u001b[0mInference done 975/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:29:42\n",
            "\u001b[32m[07/26 21:00:00 d2.evaluation.evaluator]: \u001b[0mInference done 1002/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1827 s/iter. ETA=0:29:39\n",
            "\u001b[32m[07/26 21:00:05 d2.evaluation.evaluator]: \u001b[0mInference done 1030/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1827 s/iter. ETA=0:29:34\n",
            "\u001b[32m[07/26 21:00:10 d2.evaluation.evaluator]: \u001b[0mInference done 1058/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:29:28\n",
            "\u001b[32m[07/26 21:00:16 d2.evaluation.evaluator]: \u001b[0mInference done 1086/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:29:23\n",
            "\u001b[32m[07/26 21:00:21 d2.evaluation.evaluator]: \u001b[0mInference done 1114/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:29:18\n",
            "\u001b[32m[07/26 21:00:26 d2.evaluation.evaluator]: \u001b[0mInference done 1142/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:29:12\n",
            "\u001b[32m[07/26 21:00:31 d2.evaluation.evaluator]: \u001b[0mInference done 1170/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:29:07\n",
            "\u001b[32m[07/26 21:00:36 d2.evaluation.evaluator]: \u001b[0mInference done 1198/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:29:02\n",
            "\u001b[32m[07/26 21:00:41 d2.evaluation.evaluator]: \u001b[0mInference done 1226/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:28:56\n",
            "\u001b[32m[07/26 21:00:46 d2.evaluation.evaluator]: \u001b[0mInference done 1254/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:28:51\n",
            "\u001b[32m[07/26 21:00:51 d2.evaluation.evaluator]: \u001b[0mInference done 1282/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:28:46\n",
            "\u001b[32m[07/26 21:00:56 d2.evaluation.evaluator]: \u001b[0mInference done 1310/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:28:41\n",
            "\u001b[32m[07/26 21:01:01 d2.evaluation.evaluator]: \u001b[0mInference done 1338/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:28:36\n",
            "\u001b[32m[07/26 21:01:07 d2.evaluation.evaluator]: \u001b[0mInference done 1366/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:28:30\n",
            "\u001b[32m[07/26 21:01:12 d2.evaluation.evaluator]: \u001b[0mInference done 1394/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:28:25\n",
            "\u001b[32m[07/26 21:01:17 d2.evaluation.evaluator]: \u001b[0mInference done 1422/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:28:20\n",
            "\u001b[32m[07/26 21:01:22 d2.evaluation.evaluator]: \u001b[0mInference done 1450/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:28:15\n",
            "\u001b[32m[07/26 21:01:27 d2.evaluation.evaluator]: \u001b[0mInference done 1478/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:28:09\n",
            "\u001b[32m[07/26 21:01:32 d2.evaluation.evaluator]: \u001b[0mInference done 1506/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:28:04\n",
            "\u001b[32m[07/26 21:01:37 d2.evaluation.evaluator]: \u001b[0mInference done 1533/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:28:00\n",
            "\u001b[32m[07/26 21:01:42 d2.evaluation.evaluator]: \u001b[0mInference done 1559/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:27:56\n",
            "\u001b[32m[07/26 21:01:47 d2.evaluation.evaluator]: \u001b[0mInference done 1587/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:27:51\n",
            "\u001b[32m[07/26 21:01:52 d2.evaluation.evaluator]: \u001b[0mInference done 1615/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:27:46\n",
            "\u001b[32m[07/26 21:01:57 d2.evaluation.evaluator]: \u001b[0mInference done 1643/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:27:41\n",
            "\u001b[32m[07/26 21:02:02 d2.evaluation.evaluator]: \u001b[0mInference done 1671/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:27:35\n",
            "\u001b[32m[07/26 21:02:07 d2.evaluation.evaluator]: \u001b[0mInference done 1699/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:27:30\n",
            "\u001b[32m[07/26 21:02:13 d2.evaluation.evaluator]: \u001b[0mInference done 1727/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:27:25\n",
            "\u001b[32m[07/26 21:02:18 d2.evaluation.evaluator]: \u001b[0mInference done 1755/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:27:20\n",
            "\u001b[32m[07/26 21:02:23 d2.evaluation.evaluator]: \u001b[0mInference done 1783/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:27:15\n",
            "\u001b[32m[07/26 21:02:28 d2.evaluation.evaluator]: \u001b[0mInference done 1811/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:27:10\n",
            "\u001b[32m[07/26 21:02:33 d2.evaluation.evaluator]: \u001b[0mInference done 1839/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:27:04\n",
            "\u001b[32m[07/26 21:02:38 d2.evaluation.evaluator]: \u001b[0mInference done 1867/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:59\n",
            "\u001b[32m[07/26 21:02:43 d2.evaluation.evaluator]: \u001b[0mInference done 1895/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:54\n",
            "\u001b[32m[07/26 21:02:48 d2.evaluation.evaluator]: \u001b[0mInference done 1923/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:49\n",
            "\u001b[32m[07/26 21:02:53 d2.evaluation.evaluator]: \u001b[0mInference done 1951/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:44\n",
            "\u001b[32m[07/26 21:02:58 d2.evaluation.evaluator]: \u001b[0mInference done 1979/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:39\n",
            "\u001b[32m[07/26 21:03:04 d2.evaluation.evaluator]: \u001b[0mInference done 2007/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:34\n",
            "\u001b[32m[07/26 21:03:09 d2.evaluation.evaluator]: \u001b[0mInference done 2035/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:28\n",
            "\u001b[32m[07/26 21:03:14 d2.evaluation.evaluator]: \u001b[0mInference done 2063/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:23\n",
            "\u001b[32m[07/26 21:03:19 d2.evaluation.evaluator]: \u001b[0mInference done 2091/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:26:18\n",
            "\u001b[32m[07/26 21:03:24 d2.evaluation.evaluator]: \u001b[0mInference done 2117/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:26:15\n",
            "\u001b[32m[07/26 21:03:29 d2.evaluation.evaluator]: \u001b[0mInference done 2145/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:26:10\n",
            "\u001b[32m[07/26 21:03:34 d2.evaluation.evaluator]: \u001b[0mInference done 2173/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:26:04\n",
            "\u001b[32m[07/26 21:03:39 d2.evaluation.evaluator]: \u001b[0mInference done 2201/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:25:59\n",
            "\u001b[32m[07/26 21:03:44 d2.evaluation.evaluator]: \u001b[0mInference done 2229/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:25:54\n",
            "\u001b[32m[07/26 21:03:49 d2.evaluation.evaluator]: \u001b[0mInference done 2257/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:25:49\n",
            "\u001b[32m[07/26 21:03:54 d2.evaluation.evaluator]: \u001b[0mInference done 2285/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:25:43\n",
            "\u001b[32m[07/26 21:03:59 d2.evaluation.evaluator]: \u001b[0mInference done 2313/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:25:38\n",
            "\u001b[32m[07/26 21:04:05 d2.evaluation.evaluator]: \u001b[0mInference done 2341/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:25:33\n",
            "\u001b[32m[07/26 21:04:10 d2.evaluation.evaluator]: \u001b[0mInference done 2369/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:25:28\n",
            "\u001b[32m[07/26 21:04:15 d2.evaluation.evaluator]: \u001b[0mInference done 2397/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:25:22\n",
            "\u001b[32m[07/26 21:04:20 d2.evaluation.evaluator]: \u001b[0mInference done 2425/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:25:17\n",
            "\u001b[32m[07/26 21:04:25 d2.evaluation.evaluator]: \u001b[0mInference done 2453/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:25:12\n",
            "\u001b[32m[07/26 21:04:30 d2.evaluation.evaluator]: \u001b[0mInference done 2481/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:25:07\n",
            "\u001b[32m[07/26 21:04:35 d2.evaluation.evaluator]: \u001b[0mInference done 2509/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:25:02\n",
            "\u001b[32m[07/26 21:04:40 d2.evaluation.evaluator]: \u001b[0mInference done 2537/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:24:56\n",
            "\u001b[32m[07/26 21:04:45 d2.evaluation.evaluator]: \u001b[0mInference done 2565/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:24:51\n",
            "\u001b[32m[07/26 21:04:50 d2.evaluation.evaluator]: \u001b[0mInference done 2593/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:24:46\n",
            "\u001b[32m[07/26 21:04:55 d2.evaluation.evaluator]: \u001b[0mInference done 2621/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:24:41\n",
            "\u001b[32m[07/26 21:05:00 d2.evaluation.evaluator]: \u001b[0mInference done 2649/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:24:36\n",
            "\u001b[32m[07/26 21:05:06 d2.evaluation.evaluator]: \u001b[0mInference done 2675/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:24:32\n",
            "\u001b[32m[07/26 21:05:11 d2.evaluation.evaluator]: \u001b[0mInference done 2703/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:24:27\n",
            "\u001b[32m[07/26 21:05:16 d2.evaluation.evaluator]: \u001b[0mInference done 2731/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:24:22\n",
            "\u001b[32m[07/26 21:05:21 d2.evaluation.evaluator]: \u001b[0mInference done 2759/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:24:16\n",
            "\u001b[32m[07/26 21:05:26 d2.evaluation.evaluator]: \u001b[0mInference done 2787/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:24:11\n",
            "\u001b[32m[07/26 21:05:31 d2.evaluation.evaluator]: \u001b[0mInference done 2815/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:24:06\n",
            "\u001b[32m[07/26 21:05:36 d2.evaluation.evaluator]: \u001b[0mInference done 2843/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:24:01\n",
            "\u001b[32m[07/26 21:05:41 d2.evaluation.evaluator]: \u001b[0mInference done 2871/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:56\n",
            "\u001b[32m[07/26 21:05:46 d2.evaluation.evaluator]: \u001b[0mInference done 2899/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:51\n",
            "\u001b[32m[07/26 21:05:51 d2.evaluation.evaluator]: \u001b[0mInference done 2927/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:46\n",
            "\u001b[32m[07/26 21:05:56 d2.evaluation.evaluator]: \u001b[0mInference done 2955/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:40\n",
            "\u001b[32m[07/26 21:06:02 d2.evaluation.evaluator]: \u001b[0mInference done 2983/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:35\n",
            "\u001b[32m[07/26 21:06:07 d2.evaluation.evaluator]: \u001b[0mInference done 3011/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:30\n",
            "\u001b[32m[07/26 21:06:12 d2.evaluation.evaluator]: \u001b[0mInference done 3039/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:25\n",
            "\u001b[32m[07/26 21:06:17 d2.evaluation.evaluator]: \u001b[0mInference done 3067/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:20\n",
            "\u001b[32m[07/26 21:06:22 d2.evaluation.evaluator]: \u001b[0mInference done 3095/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:15\n",
            "\u001b[32m[07/26 21:06:27 d2.evaluation.evaluator]: \u001b[0mInference done 3123/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:10\n",
            "\u001b[32m[07/26 21:06:32 d2.evaluation.evaluator]: \u001b[0mInference done 3151/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:23:05\n",
            "\u001b[32m[07/26 21:06:37 d2.evaluation.evaluator]: \u001b[0mInference done 3179/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:59\n",
            "\u001b[32m[07/26 21:06:42 d2.evaluation.evaluator]: \u001b[0mInference done 3207/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:54\n",
            "\u001b[32m[07/26 21:06:48 d2.evaluation.evaluator]: \u001b[0mInference done 3233/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:22:50\n",
            "\u001b[32m[07/26 21:06:53 d2.evaluation.evaluator]: \u001b[0mInference done 3261/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:22:45\n",
            "\u001b[32m[07/26 21:06:58 d2.evaluation.evaluator]: \u001b[0mInference done 3289/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:22:40\n",
            "\u001b[32m[07/26 21:07:03 d2.evaluation.evaluator]: \u001b[0mInference done 3317/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:35\n",
            "\u001b[32m[07/26 21:07:08 d2.evaluation.evaluator]: \u001b[0mInference done 3345/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:30\n",
            "\u001b[32m[07/26 21:07:13 d2.evaluation.evaluator]: \u001b[0mInference done 3373/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:25\n",
            "\u001b[32m[07/26 21:07:18 d2.evaluation.evaluator]: \u001b[0mInference done 3401/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:19\n",
            "\u001b[32m[07/26 21:07:23 d2.evaluation.evaluator]: \u001b[0mInference done 3429/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:14\n",
            "\u001b[32m[07/26 21:07:28 d2.evaluation.evaluator]: \u001b[0mInference done 3457/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:09\n",
            "\u001b[32m[07/26 21:07:33 d2.evaluation.evaluator]: \u001b[0mInference done 3485/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:22:04\n",
            "\u001b[32m[07/26 21:07:38 d2.evaluation.evaluator]: \u001b[0mInference done 3513/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:59\n",
            "\u001b[32m[07/26 21:07:43 d2.evaluation.evaluator]: \u001b[0mInference done 3541/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:54\n",
            "\u001b[32m[07/26 21:07:49 d2.evaluation.evaluator]: \u001b[0mInference done 3569/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:48\n",
            "\u001b[32m[07/26 21:07:54 d2.evaluation.evaluator]: \u001b[0mInference done 3597/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:43\n",
            "\u001b[32m[07/26 21:07:59 d2.evaluation.evaluator]: \u001b[0mInference done 3625/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:38\n",
            "\u001b[32m[07/26 21:08:04 d2.evaluation.evaluator]: \u001b[0mInference done 3653/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:33\n",
            "\u001b[32m[07/26 21:08:09 d2.evaluation.evaluator]: \u001b[0mInference done 3681/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:28\n",
            "\u001b[32m[07/26 21:08:14 d2.evaluation.evaluator]: \u001b[0mInference done 3709/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:23\n",
            "\u001b[32m[07/26 21:08:19 d2.evaluation.evaluator]: \u001b[0mInference done 3737/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:18\n",
            "\u001b[32m[07/26 21:08:24 d2.evaluation.evaluator]: \u001b[0mInference done 3765/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:21:13\n",
            "\u001b[32m[07/26 21:08:29 d2.evaluation.evaluator]: \u001b[0mInference done 3791/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:21:08\n",
            "\u001b[32m[07/26 21:08:34 d2.evaluation.evaluator]: \u001b[0mInference done 3819/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:21:03\n",
            "\u001b[32m[07/26 21:08:40 d2.evaluation.evaluator]: \u001b[0mInference done 3847/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:58\n",
            "\u001b[32m[07/26 21:08:45 d2.evaluation.evaluator]: \u001b[0mInference done 3875/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:20:53\n",
            "\u001b[32m[07/26 21:08:50 d2.evaluation.evaluator]: \u001b[0mInference done 3903/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:20:48\n",
            "\u001b[32m[07/26 21:08:55 d2.evaluation.evaluator]: \u001b[0mInference done 3931/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:43\n",
            "\u001b[32m[07/26 21:09:00 d2.evaluation.evaluator]: \u001b[0mInference done 3959/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:38\n",
            "\u001b[32m[07/26 21:09:05 d2.evaluation.evaluator]: \u001b[0mInference done 3987/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:32\n",
            "\u001b[32m[07/26 21:09:10 d2.evaluation.evaluator]: \u001b[0mInference done 4015/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:27\n",
            "\u001b[32m[07/26 21:09:15 d2.evaluation.evaluator]: \u001b[0mInference done 4043/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:22\n",
            "\u001b[32m[07/26 21:09:20 d2.evaluation.evaluator]: \u001b[0mInference done 4071/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:17\n",
            "\u001b[32m[07/26 21:09:25 d2.evaluation.evaluator]: \u001b[0mInference done 4099/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:12\n",
            "\u001b[32m[07/26 21:09:30 d2.evaluation.evaluator]: \u001b[0mInference done 4127/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:07\n",
            "\u001b[32m[07/26 21:09:36 d2.evaluation.evaluator]: \u001b[0mInference done 4155/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:20:02\n",
            "\u001b[32m[07/26 21:09:41 d2.evaluation.evaluator]: \u001b[0mInference done 4183/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:19:56\n",
            "\u001b[32m[07/26 21:09:46 d2.evaluation.evaluator]: \u001b[0mInference done 4211/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:19:51\n",
            "\u001b[32m[07/26 21:09:51 d2.evaluation.evaluator]: \u001b[0mInference done 4239/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:19:46\n",
            "\u001b[32m[07/26 21:09:56 d2.evaluation.evaluator]: \u001b[0mInference done 4265/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:19:42\n",
            "\u001b[32m[07/26 21:10:01 d2.evaluation.evaluator]: \u001b[0mInference done 4293/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:19:37\n",
            "\u001b[32m[07/26 21:10:06 d2.evaluation.evaluator]: \u001b[0mInference done 4321/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:19:31\n",
            "\u001b[32m[07/26 21:10:11 d2.evaluation.evaluator]: \u001b[0mInference done 4347/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:19:27\n",
            "\u001b[32m[07/26 21:10:16 d2.evaluation.evaluator]: \u001b[0mInference done 4375/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:19:22\n",
            "\u001b[32m[07/26 21:10:21 d2.evaluation.evaluator]: \u001b[0mInference done 4403/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:19:17\n",
            "\u001b[32m[07/26 21:10:26 d2.evaluation.evaluator]: \u001b[0mInference done 4431/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:19:12\n",
            "\u001b[32m[07/26 21:10:31 d2.evaluation.evaluator]: \u001b[0mInference done 4459/10742. Dataloading: 0.0022 s/iter. Inference: 0.1800 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:19:07\n",
            "\u001b[32m[07/26 21:10:36 d2.evaluation.evaluator]: \u001b[0mInference done 4487/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1826 s/iter. ETA=0:19:01\n",
            "\u001b[32m[07/26 21:10:41 d2.evaluation.evaluator]: \u001b[0mInference done 4515/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:56\n",
            "\u001b[32m[07/26 21:10:47 d2.evaluation.evaluator]: \u001b[0mInference done 4543/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:51\n",
            "\u001b[32m[07/26 21:10:52 d2.evaluation.evaluator]: \u001b[0mInference done 4571/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:46\n",
            "\u001b[32m[07/26 21:10:57 d2.evaluation.evaluator]: \u001b[0mInference done 4599/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:41\n",
            "\u001b[32m[07/26 21:11:02 d2.evaluation.evaluator]: \u001b[0mInference done 4627/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:36\n",
            "\u001b[32m[07/26 21:11:07 d2.evaluation.evaluator]: \u001b[0mInference done 4655/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:30\n",
            "\u001b[32m[07/26 21:11:12 d2.evaluation.evaluator]: \u001b[0mInference done 4683/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:25\n",
            "\u001b[32m[07/26 21:11:17 d2.evaluation.evaluator]: \u001b[0mInference done 4711/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:20\n",
            "\u001b[32m[07/26 21:11:22 d2.evaluation.evaluator]: \u001b[0mInference done 4739/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:15\n",
            "\u001b[32m[07/26 21:11:27 d2.evaluation.evaluator]: \u001b[0mInference done 4767/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:10\n",
            "\u001b[32m[07/26 21:11:32 d2.evaluation.evaluator]: \u001b[0mInference done 4795/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:18:05\n",
            "\u001b[32m[07/26 21:11:37 d2.evaluation.evaluator]: \u001b[0mInference done 4823/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:17:59\n",
            "\u001b[32m[07/26 21:11:42 d2.evaluation.evaluator]: \u001b[0mInference done 4851/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:17:54\n",
            "\u001b[32m[07/26 21:11:47 d2.evaluation.evaluator]: \u001b[0mInference done 4879/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:17:49\n",
            "\u001b[32m[07/26 21:11:52 d2.evaluation.evaluator]: \u001b[0mInference done 4905/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:45\n",
            "\u001b[32m[07/26 21:11:58 d2.evaluation.evaluator]: \u001b[0mInference done 4933/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:40\n",
            "\u001b[32m[07/26 21:12:03 d2.evaluation.evaluator]: \u001b[0mInference done 4961/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:35\n",
            "\u001b[32m[07/26 21:12:08 d2.evaluation.evaluator]: \u001b[0mInference done 4989/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:29\n",
            "\u001b[32m[07/26 21:12:13 d2.evaluation.evaluator]: \u001b[0mInference done 5017/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:24\n",
            "\u001b[32m[07/26 21:12:18 d2.evaluation.evaluator]: \u001b[0mInference done 5045/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:19\n",
            "\u001b[32m[07/26 21:12:23 d2.evaluation.evaluator]: \u001b[0mInference done 5073/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:14\n",
            "\u001b[32m[07/26 21:12:28 d2.evaluation.evaluator]: \u001b[0mInference done 5101/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:09\n",
            "\u001b[32m[07/26 21:12:33 d2.evaluation.evaluator]: \u001b[0mInference done 5129/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:17:04\n",
            "\u001b[32m[07/26 21:12:38 d2.evaluation.evaluator]: \u001b[0mInference done 5157/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:16:59\n",
            "\u001b[32m[07/26 21:12:43 d2.evaluation.evaluator]: \u001b[0mInference done 5185/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:16:53\n",
            "\u001b[32m[07/26 21:12:48 d2.evaluation.evaluator]: \u001b[0mInference done 5213/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:16:48\n",
            "\u001b[32m[07/26 21:12:54 d2.evaluation.evaluator]: \u001b[0mInference done 5241/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:16:43\n",
            "\u001b[32m[07/26 21:12:59 d2.evaluation.evaluator]: \u001b[0mInference done 5269/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:16:38\n",
            "\u001b[32m[07/26 21:13:04 d2.evaluation.evaluator]: \u001b[0mInference done 5297/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:16:33\n",
            "\u001b[32m[07/26 21:13:09 d2.evaluation.evaluator]: \u001b[0mInference done 5325/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:16:28\n",
            "\u001b[32m[07/26 21:13:14 d2.evaluation.evaluator]: \u001b[0mInference done 5353/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:16:23\n",
            "\u001b[32m[07/26 21:13:19 d2.evaluation.evaluator]: \u001b[0mInference done 5381/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:16:18\n",
            "\u001b[32m[07/26 21:13:24 d2.evaluation.evaluator]: \u001b[0mInference done 5409/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:16:12\n",
            "\u001b[32m[07/26 21:13:29 d2.evaluation.evaluator]: \u001b[0mInference done 5437/10742. Dataloading: 0.0022 s/iter. Inference: 0.1798 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:16:07\n",
            "\u001b[32m[07/26 21:13:34 d2.evaluation.evaluator]: \u001b[0mInference done 5463/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:16:03\n",
            "\u001b[32m[07/26 21:13:39 d2.evaluation.evaluator]: \u001b[0mInference done 5491/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:58\n",
            "\u001b[32m[07/26 21:13:44 d2.evaluation.evaluator]: \u001b[0mInference done 5519/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:53\n",
            "\u001b[32m[07/26 21:13:49 d2.evaluation.evaluator]: \u001b[0mInference done 5547/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:47\n",
            "\u001b[32m[07/26 21:13:55 d2.evaluation.evaluator]: \u001b[0mInference done 5575/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:42\n",
            "\u001b[32m[07/26 21:14:00 d2.evaluation.evaluator]: \u001b[0mInference done 5603/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:37\n",
            "\u001b[32m[07/26 21:14:05 d2.evaluation.evaluator]: \u001b[0mInference done 5631/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:32\n",
            "\u001b[32m[07/26 21:14:10 d2.evaluation.evaluator]: \u001b[0mInference done 5659/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:27\n",
            "\u001b[32m[07/26 21:14:15 d2.evaluation.evaluator]: \u001b[0mInference done 5687/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:22\n",
            "\u001b[32m[07/26 21:14:20 d2.evaluation.evaluator]: \u001b[0mInference done 5715/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:17\n",
            "\u001b[32m[07/26 21:14:25 d2.evaluation.evaluator]: \u001b[0mInference done 5743/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:12\n",
            "\u001b[32m[07/26 21:14:30 d2.evaluation.evaluator]: \u001b[0mInference done 5771/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:07\n",
            "\u001b[32m[07/26 21:14:35 d2.evaluation.evaluator]: \u001b[0mInference done 5799/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:15:01\n",
            "\u001b[32m[07/26 21:14:41 d2.evaluation.evaluator]: \u001b[0mInference done 5827/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:56\n",
            "\u001b[32m[07/26 21:14:46 d2.evaluation.evaluator]: \u001b[0mInference done 5855/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:51\n",
            "\u001b[32m[07/26 21:14:51 d2.evaluation.evaluator]: \u001b[0mInference done 5883/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:46\n",
            "\u001b[32m[07/26 21:14:56 d2.evaluation.evaluator]: \u001b[0mInference done 5911/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:41\n",
            "\u001b[32m[07/26 21:15:01 d2.evaluation.evaluator]: \u001b[0mInference done 5939/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:36\n",
            "\u001b[32m[07/26 21:15:06 d2.evaluation.evaluator]: \u001b[0mInference done 5967/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:14:31\n",
            "\u001b[32m[07/26 21:15:11 d2.evaluation.evaluator]: \u001b[0mInference done 5995/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1824 s/iter. ETA=0:14:26\n",
            "\u001b[32m[07/26 21:15:16 d2.evaluation.evaluator]: \u001b[0mInference done 6021/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:21\n",
            "\u001b[32m[07/26 21:15:21 d2.evaluation.evaluator]: \u001b[0mInference done 6049/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:16\n",
            "\u001b[32m[07/26 21:15:26 d2.evaluation.evaluator]: \u001b[0mInference done 6077/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:11\n",
            "\u001b[32m[07/26 21:15:31 d2.evaluation.evaluator]: \u001b[0mInference done 6105/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:06\n",
            "\u001b[32m[07/26 21:15:36 d2.evaluation.evaluator]: \u001b[0mInference done 6133/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:14:01\n",
            "\u001b[32m[07/26 21:15:42 d2.evaluation.evaluator]: \u001b[0mInference done 6161/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:55\n",
            "\u001b[32m[07/26 21:15:47 d2.evaluation.evaluator]: \u001b[0mInference done 6189/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:50\n",
            "\u001b[32m[07/26 21:15:52 d2.evaluation.evaluator]: \u001b[0mInference done 6217/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:45\n",
            "\u001b[32m[07/26 21:15:57 d2.evaluation.evaluator]: \u001b[0mInference done 6245/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:40\n",
            "\u001b[32m[07/26 21:16:02 d2.evaluation.evaluator]: \u001b[0mInference done 6273/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:35\n",
            "\u001b[32m[07/26 21:16:07 d2.evaluation.evaluator]: \u001b[0mInference done 6301/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:30\n",
            "\u001b[32m[07/26 21:16:12 d2.evaluation.evaluator]: \u001b[0mInference done 6329/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:25\n",
            "\u001b[32m[07/26 21:16:17 d2.evaluation.evaluator]: \u001b[0mInference done 6357/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:20\n",
            "\u001b[32m[07/26 21:16:22 d2.evaluation.evaluator]: \u001b[0mInference done 6385/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:15\n",
            "\u001b[32m[07/26 21:16:27 d2.evaluation.evaluator]: \u001b[0mInference done 6413/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:09\n",
            "\u001b[32m[07/26 21:16:33 d2.evaluation.evaluator]: \u001b[0mInference done 6441/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:13:04\n",
            "\u001b[32m[07/26 21:16:38 d2.evaluation.evaluator]: \u001b[0mInference done 6469/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:59\n",
            "\u001b[32m[07/26 21:16:43 d2.evaluation.evaluator]: \u001b[0mInference done 6497/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:54\n",
            "\u001b[32m[07/26 21:16:48 d2.evaluation.evaluator]: \u001b[0mInference done 6525/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:49\n",
            "\u001b[32m[07/26 21:16:53 d2.evaluation.evaluator]: \u001b[0mInference done 6552/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:44\n",
            "\u001b[32m[07/26 21:16:58 d2.evaluation.evaluator]: \u001b[0mInference done 6579/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:39\n",
            "\u001b[32m[07/26 21:17:03 d2.evaluation.evaluator]: \u001b[0mInference done 6607/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:34\n",
            "\u001b[32m[07/26 21:17:08 d2.evaluation.evaluator]: \u001b[0mInference done 6635/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:29\n",
            "\u001b[32m[07/26 21:17:13 d2.evaluation.evaluator]: \u001b[0mInference done 6663/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:24\n",
            "\u001b[32m[07/26 21:17:18 d2.evaluation.evaluator]: \u001b[0mInference done 6691/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:19\n",
            "\u001b[32m[07/26 21:17:23 d2.evaluation.evaluator]: \u001b[0mInference done 6719/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:14\n",
            "\u001b[32m[07/26 21:17:29 d2.evaluation.evaluator]: \u001b[0mInference done 6747/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:09\n",
            "\u001b[32m[07/26 21:17:34 d2.evaluation.evaluator]: \u001b[0mInference done 6775/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:12:03\n",
            "\u001b[32m[07/26 21:17:39 d2.evaluation.evaluator]: \u001b[0mInference done 6803/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:58\n",
            "\u001b[32m[07/26 21:17:44 d2.evaluation.evaluator]: \u001b[0mInference done 6831/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:53\n",
            "\u001b[32m[07/26 21:17:49 d2.evaluation.evaluator]: \u001b[0mInference done 6859/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:48\n",
            "\u001b[32m[07/26 21:17:54 d2.evaluation.evaluator]: \u001b[0mInference done 6887/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:43\n",
            "\u001b[32m[07/26 21:17:59 d2.evaluation.evaluator]: \u001b[0mInference done 6915/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:38\n",
            "\u001b[32m[07/26 21:18:04 d2.evaluation.evaluator]: \u001b[0mInference done 6943/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:33\n",
            "\u001b[32m[07/26 21:18:09 d2.evaluation.evaluator]: \u001b[0mInference done 6971/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:28\n",
            "\u001b[32m[07/26 21:18:14 d2.evaluation.evaluator]: \u001b[0mInference done 6999/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:23\n",
            "\u001b[32m[07/26 21:18:20 d2.evaluation.evaluator]: \u001b[0mInference done 7027/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:17\n",
            "\u001b[32m[07/26 21:18:25 d2.evaluation.evaluator]: \u001b[0mInference done 7055/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:12\n",
            "\u001b[32m[07/26 21:18:30 d2.evaluation.evaluator]: \u001b[0mInference done 7083/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:07\n",
            "\u001b[32m[07/26 21:18:35 d2.evaluation.evaluator]: \u001b[0mInference done 7110/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:11:02\n",
            "\u001b[32m[07/26 21:18:40 d2.evaluation.evaluator]: \u001b[0mInference done 7137/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:57\n",
            "\u001b[32m[07/26 21:18:45 d2.evaluation.evaluator]: \u001b[0mInference done 7165/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:52\n",
            "\u001b[32m[07/26 21:18:50 d2.evaluation.evaluator]: \u001b[0mInference done 7193/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:47\n",
            "\u001b[32m[07/26 21:18:55 d2.evaluation.evaluator]: \u001b[0mInference done 7221/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:42\n",
            "\u001b[32m[07/26 21:19:00 d2.evaluation.evaluator]: \u001b[0mInference done 7249/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:37\n",
            "\u001b[32m[07/26 21:19:05 d2.evaluation.evaluator]: \u001b[0mInference done 7277/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:32\n",
            "\u001b[32m[07/26 21:19:10 d2.evaluation.evaluator]: \u001b[0mInference done 7305/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:27\n",
            "\u001b[32m[07/26 21:19:16 d2.evaluation.evaluator]: \u001b[0mInference done 7333/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:22\n",
            "\u001b[32m[07/26 21:19:21 d2.evaluation.evaluator]: \u001b[0mInference done 7361/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:17\n",
            "\u001b[32m[07/26 21:19:26 d2.evaluation.evaluator]: \u001b[0mInference done 7389/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:11\n",
            "\u001b[32m[07/26 21:19:31 d2.evaluation.evaluator]: \u001b[0mInference done 7417/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:06\n",
            "\u001b[32m[07/26 21:19:36 d2.evaluation.evaluator]: \u001b[0mInference done 7445/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:10:01\n",
            "\u001b[32m[07/26 21:19:41 d2.evaluation.evaluator]: \u001b[0mInference done 7473/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:56\n",
            "\u001b[32m[07/26 21:19:46 d2.evaluation.evaluator]: \u001b[0mInference done 7501/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:51\n",
            "\u001b[32m[07/26 21:19:51 d2.evaluation.evaluator]: \u001b[0mInference done 7529/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:46\n",
            "\u001b[32m[07/26 21:19:56 d2.evaluation.evaluator]: \u001b[0mInference done 7557/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:41\n",
            "\u001b[32m[07/26 21:20:01 d2.evaluation.evaluator]: \u001b[0mInference done 7585/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:36\n",
            "\u001b[32m[07/26 21:20:07 d2.evaluation.evaluator]: \u001b[0mInference done 7613/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:30\n",
            "\u001b[32m[07/26 21:20:12 d2.evaluation.evaluator]: \u001b[0mInference done 7641/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:25\n",
            "\u001b[32m[07/26 21:20:17 d2.evaluation.evaluator]: \u001b[0mInference done 7667/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:21\n",
            "\u001b[32m[07/26 21:20:22 d2.evaluation.evaluator]: \u001b[0mInference done 7695/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:16\n",
            "\u001b[32m[07/26 21:20:27 d2.evaluation.evaluator]: \u001b[0mInference done 7723/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:11\n",
            "\u001b[32m[07/26 21:20:32 d2.evaluation.evaluator]: \u001b[0mInference done 7751/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:05\n",
            "\u001b[32m[07/26 21:20:37 d2.evaluation.evaluator]: \u001b[0mInference done 7779/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:09:00\n",
            "\u001b[32m[07/26 21:20:42 d2.evaluation.evaluator]: \u001b[0mInference done 7807/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:55\n",
            "\u001b[32m[07/26 21:20:47 d2.evaluation.evaluator]: \u001b[0mInference done 7835/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:50\n",
            "\u001b[32m[07/26 21:20:52 d2.evaluation.evaluator]: \u001b[0mInference done 7863/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:45\n",
            "\u001b[32m[07/26 21:20:58 d2.evaluation.evaluator]: \u001b[0mInference done 7891/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:40\n",
            "\u001b[32m[07/26 21:21:03 d2.evaluation.evaluator]: \u001b[0mInference done 7919/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:35\n",
            "\u001b[32m[07/26 21:21:08 d2.evaluation.evaluator]: \u001b[0mInference done 7947/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:30\n",
            "\u001b[32m[07/26 21:21:13 d2.evaluation.evaluator]: \u001b[0mInference done 7975/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:25\n",
            "\u001b[32m[07/26 21:21:18 d2.evaluation.evaluator]: \u001b[0mInference done 8003/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:19\n",
            "\u001b[32m[07/26 21:21:23 d2.evaluation.evaluator]: \u001b[0mInference done 8031/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:14\n",
            "\u001b[32m[07/26 21:21:28 d2.evaluation.evaluator]: \u001b[0mInference done 8059/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:09\n",
            "\u001b[32m[07/26 21:21:33 d2.evaluation.evaluator]: \u001b[0mInference done 8087/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:08:04\n",
            "\u001b[32m[07/26 21:21:38 d2.evaluation.evaluator]: \u001b[0mInference done 8115/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:59\n",
            "\u001b[32m[07/26 21:21:43 d2.evaluation.evaluator]: \u001b[0mInference done 8143/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:54\n",
            "\u001b[32m[07/26 21:21:48 d2.evaluation.evaluator]: \u001b[0mInference done 8171/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:49\n",
            "\u001b[32m[07/26 21:21:54 d2.evaluation.evaluator]: \u001b[0mInference done 8199/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:44\n",
            "\u001b[32m[07/26 21:21:59 d2.evaluation.evaluator]: \u001b[0mInference done 8225/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:39\n",
            "\u001b[32m[07/26 21:22:04 d2.evaluation.evaluator]: \u001b[0mInference done 8253/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:34\n",
            "\u001b[32m[07/26 21:22:09 d2.evaluation.evaluator]: \u001b[0mInference done 8281/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:29\n",
            "\u001b[32m[07/26 21:22:14 d2.evaluation.evaluator]: \u001b[0mInference done 8309/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:24\n",
            "\u001b[32m[07/26 21:22:19 d2.evaluation.evaluator]: \u001b[0mInference done 8337/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:18\n",
            "\u001b[32m[07/26 21:22:24 d2.evaluation.evaluator]: \u001b[0mInference done 8365/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:13\n",
            "\u001b[32m[07/26 21:22:29 d2.evaluation.evaluator]: \u001b[0mInference done 8393/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:08\n",
            "\u001b[32m[07/26 21:22:34 d2.evaluation.evaluator]: \u001b[0mInference done 8421/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:07:03\n",
            "\u001b[32m[07/26 21:22:39 d2.evaluation.evaluator]: \u001b[0mInference done 8449/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:58\n",
            "\u001b[32m[07/26 21:22:44 d2.evaluation.evaluator]: \u001b[0mInference done 8477/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:53\n",
            "\u001b[32m[07/26 21:22:49 d2.evaluation.evaluator]: \u001b[0mInference done 8505/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:48\n",
            "\u001b[32m[07/26 21:22:54 d2.evaluation.evaluator]: \u001b[0mInference done 8533/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:43\n",
            "\u001b[32m[07/26 21:22:59 d2.evaluation.evaluator]: \u001b[0mInference done 8561/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:37\n",
            "\u001b[32m[07/26 21:23:05 d2.evaluation.evaluator]: \u001b[0mInference done 8589/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:32\n",
            "\u001b[32m[07/26 21:23:10 d2.evaluation.evaluator]: \u001b[0mInference done 8617/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:27\n",
            "\u001b[32m[07/26 21:23:15 d2.evaluation.evaluator]: \u001b[0mInference done 8645/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:22\n",
            "\u001b[32m[07/26 21:23:20 d2.evaluation.evaluator]: \u001b[0mInference done 8673/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:17\n",
            "\u001b[32m[07/26 21:23:25 d2.evaluation.evaluator]: \u001b[0mInference done 8701/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:12\n",
            "\u001b[32m[07/26 21:23:30 d2.evaluation.evaluator]: \u001b[0mInference done 8729/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:07\n",
            "\u001b[32m[07/26 21:23:35 d2.evaluation.evaluator]: \u001b[0mInference done 8756/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:06:02\n",
            "\u001b[32m[07/26 21:23:40 d2.evaluation.evaluator]: \u001b[0mInference done 8784/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:57\n",
            "\u001b[32m[07/26 21:23:45 d2.evaluation.evaluator]: \u001b[0mInference done 8812/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:52\n",
            "\u001b[32m[07/26 21:23:50 d2.evaluation.evaluator]: \u001b[0mInference done 8840/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:47\n",
            "\u001b[32m[07/26 21:23:56 d2.evaluation.evaluator]: \u001b[0mInference done 8868/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:41\n",
            "\u001b[32m[07/26 21:24:01 d2.evaluation.evaluator]: \u001b[0mInference done 8896/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:36\n",
            "\u001b[32m[07/26 21:24:06 d2.evaluation.evaluator]: \u001b[0mInference done 8924/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:31\n",
            "\u001b[32m[07/26 21:24:11 d2.evaluation.evaluator]: \u001b[0mInference done 8952/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:26\n",
            "\u001b[32m[07/26 21:24:16 d2.evaluation.evaluator]: \u001b[0mInference done 8980/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:21\n",
            "\u001b[32m[07/26 21:24:21 d2.evaluation.evaluator]: \u001b[0mInference done 9008/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:16\n",
            "\u001b[32m[07/26 21:24:26 d2.evaluation.evaluator]: \u001b[0mInference done 9036/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:11\n",
            "\u001b[32m[07/26 21:24:31 d2.evaluation.evaluator]: \u001b[0mInference done 9064/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:06\n",
            "\u001b[32m[07/26 21:24:36 d2.evaluation.evaluator]: \u001b[0mInference done 9092/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:05:01\n",
            "\u001b[32m[07/26 21:24:41 d2.evaluation.evaluator]: \u001b[0mInference done 9120/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:55\n",
            "\u001b[32m[07/26 21:24:46 d2.evaluation.evaluator]: \u001b[0mInference done 9148/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:50\n",
            "\u001b[32m[07/26 21:24:52 d2.evaluation.evaluator]: \u001b[0mInference done 9176/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:45\n",
            "\u001b[32m[07/26 21:24:57 d2.evaluation.evaluator]: \u001b[0mInference done 9204/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:40\n",
            "\u001b[32m[07/26 21:25:02 d2.evaluation.evaluator]: \u001b[0mInference done 9232/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:35\n",
            "\u001b[32m[07/26 21:25:07 d2.evaluation.evaluator]: \u001b[0mInference done 9260/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:30\n",
            "\u001b[32m[07/26 21:25:12 d2.evaluation.evaluator]: \u001b[0mInference done 9288/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:25\n",
            "\u001b[32m[07/26 21:25:17 d2.evaluation.evaluator]: \u001b[0mInference done 9314/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:20\n",
            "\u001b[32m[07/26 21:25:22 d2.evaluation.evaluator]: \u001b[0mInference done 9342/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:15\n",
            "\u001b[32m[07/26 21:25:27 d2.evaluation.evaluator]: \u001b[0mInference done 9370/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:10\n",
            "\u001b[32m[07/26 21:25:32 d2.evaluation.evaluator]: \u001b[0mInference done 9397/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:05\n",
            "\u001b[32m[07/26 21:25:37 d2.evaluation.evaluator]: \u001b[0mInference done 9425/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:04:00\n",
            "\u001b[32m[07/26 21:25:42 d2.evaluation.evaluator]: \u001b[0mInference done 9453/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:55\n",
            "\u001b[32m[07/26 21:25:48 d2.evaluation.evaluator]: \u001b[0mInference done 9481/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:50\n",
            "\u001b[32m[07/26 21:25:53 d2.evaluation.evaluator]: \u001b[0mInference done 9509/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:45\n",
            "\u001b[32m[07/26 21:25:58 d2.evaluation.evaluator]: \u001b[0mInference done 9537/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:39\n",
            "\u001b[32m[07/26 21:26:03 d2.evaluation.evaluator]: \u001b[0mInference done 9565/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:34\n",
            "\u001b[32m[07/26 21:26:08 d2.evaluation.evaluator]: \u001b[0mInference done 9593/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:29\n",
            "\u001b[32m[07/26 21:26:13 d2.evaluation.evaluator]: \u001b[0mInference done 9621/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:24\n",
            "\u001b[32m[07/26 21:26:18 d2.evaluation.evaluator]: \u001b[0mInference done 9649/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:19\n",
            "\u001b[32m[07/26 21:26:23 d2.evaluation.evaluator]: \u001b[0mInference done 9677/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:14\n",
            "\u001b[32m[07/26 21:26:28 d2.evaluation.evaluator]: \u001b[0mInference done 9705/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:09\n",
            "\u001b[32m[07/26 21:26:33 d2.evaluation.evaluator]: \u001b[0mInference done 9733/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:03:04\n",
            "\u001b[32m[07/26 21:26:38 d2.evaluation.evaluator]: \u001b[0mInference done 9761/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:59\n",
            "\u001b[32m[07/26 21:26:43 d2.evaluation.evaluator]: \u001b[0mInference done 9789/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:53\n",
            "\u001b[32m[07/26 21:26:49 d2.evaluation.evaluator]: \u001b[0mInference done 9817/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:48\n",
            "\u001b[32m[07/26 21:26:54 d2.evaluation.evaluator]: \u001b[0mInference done 9844/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:43\n",
            "\u001b[32m[07/26 21:26:59 d2.evaluation.evaluator]: \u001b[0mInference done 9871/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:38\n",
            "\u001b[32m[07/26 21:27:04 d2.evaluation.evaluator]: \u001b[0mInference done 9899/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:33\n",
            "\u001b[32m[07/26 21:27:09 d2.evaluation.evaluator]: \u001b[0mInference done 9927/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:28\n",
            "\u001b[32m[07/26 21:27:14 d2.evaluation.evaluator]: \u001b[0mInference done 9955/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:23\n",
            "\u001b[32m[07/26 21:27:19 d2.evaluation.evaluator]: \u001b[0mInference done 9983/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:18\n",
            "\u001b[32m[07/26 21:27:24 d2.evaluation.evaluator]: \u001b[0mInference done 10011/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:13\n",
            "\u001b[32m[07/26 21:27:29 d2.evaluation.evaluator]: \u001b[0mInference done 10039/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:08\n",
            "\u001b[32m[07/26 21:27:34 d2.evaluation.evaluator]: \u001b[0mInference done 10067/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:02:03\n",
            "\u001b[32m[07/26 21:27:39 d2.evaluation.evaluator]: \u001b[0mInference done 10095/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:58\n",
            "\u001b[32m[07/26 21:27:44 d2.evaluation.evaluator]: \u001b[0mInference done 10123/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:52\n",
            "\u001b[32m[07/26 21:27:50 d2.evaluation.evaluator]: \u001b[0mInference done 10151/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:47\n",
            "\u001b[32m[07/26 21:27:55 d2.evaluation.evaluator]: \u001b[0mInference done 10179/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:42\n",
            "\u001b[32m[07/26 21:28:00 d2.evaluation.evaluator]: \u001b[0mInference done 10207/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:37\n",
            "\u001b[32m[07/26 21:28:05 d2.evaluation.evaluator]: \u001b[0mInference done 10235/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:32\n",
            "\u001b[32m[07/26 21:28:10 d2.evaluation.evaluator]: \u001b[0mInference done 10263/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:27\n",
            "\u001b[32m[07/26 21:28:15 d2.evaluation.evaluator]: \u001b[0mInference done 10291/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:22\n",
            "\u001b[32m[07/26 21:28:20 d2.evaluation.evaluator]: \u001b[0mInference done 10319/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:17\n",
            "\u001b[32m[07/26 21:28:25 d2.evaluation.evaluator]: \u001b[0mInference done 10347/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:12\n",
            "\u001b[32m[07/26 21:28:30 d2.evaluation.evaluator]: \u001b[0mInference done 10375/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:06\n",
            "\u001b[32m[07/26 21:28:35 d2.evaluation.evaluator]: \u001b[0mInference done 10401/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:01:02\n",
            "\u001b[32m[07/26 21:28:41 d2.evaluation.evaluator]: \u001b[0mInference done 10429/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:57\n",
            "\u001b[32m[07/26 21:28:46 d2.evaluation.evaluator]: \u001b[0mInference done 10457/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:52\n",
            "\u001b[32m[07/26 21:28:51 d2.evaluation.evaluator]: \u001b[0mInference done 10485/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:46\n",
            "\u001b[32m[07/26 21:28:56 d2.evaluation.evaluator]: \u001b[0mInference done 10513/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:41\n",
            "\u001b[32m[07/26 21:29:01 d2.evaluation.evaluator]: \u001b[0mInference done 10541/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:36\n",
            "\u001b[32m[07/26 21:29:06 d2.evaluation.evaluator]: \u001b[0mInference done 10569/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:31\n",
            "\u001b[32m[07/26 21:29:11 d2.evaluation.evaluator]: \u001b[0mInference done 10597/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:26\n",
            "\u001b[32m[07/26 21:29:16 d2.evaluation.evaluator]: \u001b[0mInference done 10625/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:21\n",
            "\u001b[32m[07/26 21:29:21 d2.evaluation.evaluator]: \u001b[0mInference done 10653/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:16\n",
            "\u001b[32m[07/26 21:29:26 d2.evaluation.evaluator]: \u001b[0mInference done 10681/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:11\n",
            "\u001b[32m[07/26 21:29:31 d2.evaluation.evaluator]: \u001b[0mInference done 10709/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:06\n",
            "\u001b[32m[07/26 21:29:36 d2.evaluation.evaluator]: \u001b[0mInference done 10737/10742. Dataloading: 0.0022 s/iter. Inference: 0.1799 s/iter. Eval: 0.0003 s/iter. Total: 0.1825 s/iter. ETA=0:00:00\n",
            "\u001b[32m[07/26 21:29:37 d2.evaluation.evaluator]: \u001b[0mTotal inference time: 0:32:39.240766 (0.182476 s / iter per device, on 1 devices)\n",
            "\u001b[32m[07/26 21:29:37 d2.evaluation.evaluator]: \u001b[0mTotal inference pure compute time: 0:32:11 (0.179870 s / iter per device, on 1 devices)\n",
            "\u001b[32m[07/26 21:29:39 d2.evaluation.coco_evaluation]: \u001b[0mPreparing results for COCO format ...\n",
            "\u001b[32m[07/26 21:29:39 d2.evaluation.coco_evaluation]: \u001b[0mSaving results to content/output/coco_instances_results.json\n",
            "\u001b[32m[07/26 21:29:40 d2.evaluation.coco_evaluation]: \u001b[0mEvaluating predictions with unofficial COCO API...\n",
            "Loading and preparing results...\n",
            "DONE (t=0.80s)\n",
            "creating index...\n",
            "index created!\n",
            "\u001b[32m[07/26 21:29:41 d2.evaluation.fast_eval_api]: \u001b[0mEvaluate annotation type *bbox*\n",
            "\u001b[32m[07/26 21:29:43 d2.evaluation.fast_eval_api]: \u001b[0mCOCOeval_opt.evaluate() finished in 2.24 seconds.\n",
            "\u001b[32m[07/26 21:29:44 d2.evaluation.fast_eval_api]: \u001b[0mAccumulating evaluation results...\n",
            "\u001b[32m[07/26 21:29:45 d2.evaluation.fast_eval_api]: \u001b[0mCOCOeval_opt.accumulate() finished in 0.95 seconds.\n",
            " Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.378\n",
            " Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.716\n",
            " Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.358\n",
            " Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.308\n",
            " Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.623\n",
            " Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.622\n",
            " Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.107\n",
            " Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.393\n",
            " Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.457\n",
            " Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.399\n",
            " Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.683\n",
            " Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.689\n",
            "\u001b[32m[07/26 21:29:45 d2.evaluation.coco_evaluation]: \u001b[0mEvaluation results for bbox: \n",
            "|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |\n",
            "|:------:|:------:|:------:|:------:|:------:|:------:|\n",
            "| 37.782 | 71.604 | 35.759 | 30.757 | 62.350 | 62.234 |\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OrderedDict([('bbox',\n",
              "              {'AP': 37.782179956712255,\n",
              "               'AP50': 71.60402066487438,\n",
              "               'AP75': 35.7587428245421,\n",
              "               'APl': 62.23441661377858,\n",
              "               'APm': 62.34995540065312,\n",
              "               'APs': 30.757387679398065})])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "from detectron2.data import DatasetCatalog, MetadataCatalog, build_detection_test_loader\n",
        "from detectron2.evaluation import COCOEvaluator, inference_on_dataset\n",
        "\n",
        "cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\n",
        "cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.85\n",
        "predictor = DefaultPredictor(cfg)\n",
        "evaluator = COCOEvaluator(\"FLIR_THERMAL_train_data\", cfg, False, output_dir=\"content/output/\")\n",
        "val_loader = build_detection_test_loader(cfg, \"FLIR_THERMAL_val_data\")\n",
        "inference_on_dataset(trainer.model, val_loader, evaluator)"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "background_execution": "on",
      "collapsed_sections": [],
      "name": "第2遍跑thermal大数据vovnet 1x_V2_39_FPN",
      "provenance": [],
      "include_colab_link": true
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}